{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_ITEM_TO_CART, DELETE_ITEM_FROM_CART, CLEAR_CART } from './types';\nconst initialState = {\n  items: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ITEM_TO_CART:\n      return _objectSpread({}, state, {\n        items: [...state.items, action.payload]\n      });\n\n    case DELETE_ITEM_FROM_CART:\n      return _objectSpread({}, state, {\n        items: state.items.filter(item => item.id !== action.payload)\n      });\n\n    case CLEAR_CART:\n      return _objectSpread({}, state, {\n        items: state.items.filter(item => item.id !== action.payload)\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/dima/projects/test-store/src/reducers/cart.tsx"],"names":["ADD_ITEM_TO_CART","DELETE_ITEM_FROM_CART","CLEAR_CART","initialState","items","state","action","type","payload","filter","item","id"],"mappings":";;;;;;AAAA,SAASA,gBAAT,EAA2BC,qBAA3B,EAAkDC,UAAlD,QAAgG,SAAhG;AAEA,MAAMC,YAAuB,GAAG;AAC5BC,EAAAA,KAAK,EAAE;AADqB,CAAhC;AAIA,gBAAe,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAA8D;AACzE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,gBAAL;AACI,+BACOK,KADP;AAEID,QAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACD,KAAV,EAAiBE,MAAM,CAACE,OAAxB;AAFX;;AAKJ,SAAKP,qBAAL;AACI,+BACOI,KADP;AAEID,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACE,OAAhD;AAFX;;AAIJ,SAAKN,UAAL;AACI,+BACOG,KADP;AAEID,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACE,OAAhD;AAFX;;AAIJ;AACI,aAAOH,KAAP;AAlBR;AAoBH,CArBD","sourcesContent":["import { ADD_ITEM_TO_CART, DELETE_ITEM_FROM_CART, CLEAR_CART, CartActionTypes, CartState } from './types';\n\nconst initialState: CartState = {\n    items: [],\n};\n\nexport default (state = initialState, action: CartActionTypes): CartState => {\n    switch (action.type) {\n        case ADD_ITEM_TO_CART:\n            return {\n                ...state,\n                items: [...state.items, action.payload],\n            };\n\n        case DELETE_ITEM_FROM_CART:\n            return {\n                ...state,\n                items: state.items.filter((item) => item.id !== action.payload),\n            };\n        case CLEAR_CART:\n            return {\n                ...state,\n                items: state.items.filter((item) => item.id !== action.payload),\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}