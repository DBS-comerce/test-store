{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LOAD_ITEMS, LOAD_CATEGORIES } from './types';\nconst initialState = {\n  items: [],\n  categories: []\n};\nexport default ((state = initialState, action) => {\n  console.log(777, action.payload);\n\n  switch (action.type) {\n    case LOAD_ITEMS:\n      return _objectSpread({}, state, {\n        items: [...action.payload]\n      });\n\n    case LOAD_CATEGORIES:\n      return _objectSpread({}, state, {}, action.payload);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/dima/projects/test-store/src/reducers/items.tsx"],"names":["LOAD_ITEMS","LOAD_CATEGORIES","initialState","items","categories","state","action","console","log","payload","type"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,eAArB,QAA0E,SAA1E;AAEA,MAAMC,YAAwB,GAAG;AAC7BC,EAAAA,KAAK,EAAE,EADsB;AAE7BC,EAAAA,UAAU,EAAE;AAFiB,CAAjC;AAKA,gBAAe,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAgE;AAC3EC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBF,MAAM,CAACG,OAAxB;;AACA,UAAQH,MAAM,CAACI,IAAf;AACI,SAAKV,UAAL;AACI,+BACOK,KADP;AAEIF,QAAAA,KAAK,EAAE,CAAC,GAAGG,MAAM,CAACG,OAAX;AAFX;;AAKJ,SAAKR,eAAL;AACI,+BACOI,KADP,MAEOC,MAAM,CAACG,OAFd;;AAKJ;AACI,aAAOJ,KAAP;AAdR;AAgBH,CAlBD","sourcesContent":["import { LOAD_ITEMS, LOAD_CATEGORIES, ItemsState, ItemsActionTypes } from './types';\n\nconst initialState: ItemsState = {\n    items: [],\n    categories: [],\n};\n\nexport default (state = initialState, action: ItemsActionTypes): ItemsState => {\n    console.log(777, action.payload);\n    switch (action.type) {\n        case LOAD_ITEMS:\n            return {\n                ...state,\n                items: [...action.payload],\n            };\n\n        case LOAD_CATEGORIES:\n            return {\n                ...state,\n                ...action.payload,\n            };\n\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}